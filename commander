#!/usr/bin/env bash
set -euo pipefail

BASE_DIR="$(dirname "$0")"
COMMANDS_DIR="$BASE_DIR/commands"
ROOT_README="$BASE_DIR/readme"

show_help() {
    local target="$1"
    if [[ -f "$target/readme" ]]; then
        cat "$target/readme"
    elif [[ -f "$target" ]]; then
        local dir
        dir="$(dirname "$target")"
        local base
        base="$(basename "$target" .sh)"
        if [[ -f "$dir/${base}.readme" ]]; then
            cat "$dir/${base}.readme"
        elif [[ -f "$dir/readme" ]]; then
            cat "$dir/readme"
        else
            echo "No help found for: $target"
        fi
    else
        echo "No help found for: $target"
    fi
    exit 0
}

ARGS=()
HELP_REQUESTED=false
for arg in "$@"; do
    if [[ "$arg" == "--help" ]]; then
        HELP_REQUESTED=true
    else
        ARGS+=("$arg")
    fi
done

if [ ${#ARGS[@]} -eq 0 ]; then
    show_help "$BASE_DIR"
fi

COMMAND="${ARGS[0]}"
SUBCOMMAND="${ARGS[1]:-}"

if [[ -f "$COMMAND" ]]; then
    if $HELP_REQUESTED; then
        show_help "$COMMAND"
    fi
    bash "$COMMAND" "${ARGS[@]:1}"
    exit 0
fi

SCRIPT_PATH="$COMMANDS_DIR/$COMMAND.sh"
if [[ -f "$SCRIPT_PATH" ]]; then
    if $HELP_REQUESTED; then
        show_help "$SCRIPT_PATH"
    fi
    bash "$SCRIPT_PATH" "${ARGS[@]:1}"
    exit 0
fi

if [[ -d "$COMMANDS_DIR/$COMMAND" ]]; then
    if [[ -z "$SUBCOMMAND" ]]; then
        if $HELP_REQUESTED; then
            show_help "$COMMANDS_DIR/$COMMAND"
        else
            echo "Error: missing subcommand for '$COMMAND'"
            exit 1
        fi
    fi
    SUBSCRIPT="$COMMANDS_DIR/$COMMAND/$SUBCOMMAND.sh"
    if [[ -f "$SUBSCRIPT" ]]; then
        if $HELP_REQUESTED; then
            show_help "$SUBSCRIPT"
        fi
        bash "$SUBSCRIPT" "${ARGS[@]:2}"
        exit 0
    else
        echo "Error: subcommand '$SUBCOMMAND' not found in '$COMMAND'."
        exit 1
    fi
fi

echo "Error: command '$COMMAND' not found."
show_help "$BASE_DIR"

